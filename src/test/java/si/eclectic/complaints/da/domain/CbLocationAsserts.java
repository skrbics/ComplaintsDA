package si.eclectic.complaints.da.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CbLocationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCbLocationAllPropertiesEquals(CbLocation expected, CbLocation actual) {
        assertCbLocationAutoGeneratedPropertiesEquals(expected, actual);
        assertCbLocationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCbLocationAllUpdatablePropertiesEquals(CbLocation expected, CbLocation actual) {
        assertCbLocationUpdatableFieldsEquals(expected, actual);
        assertCbLocationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCbLocationAutoGeneratedPropertiesEquals(CbLocation expected, CbLocation actual) {
        assertThat(expected)
            .as("Verify CbLocation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCbLocationUpdatableFieldsEquals(CbLocation expected, CbLocation actual) {
        assertThat(expected)
            .as("Verify CbLocation relevant properties")
            .satisfies(e -> assertThat(e.getLocationName()).as("check locationName").isEqualTo(actual.getLocationName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCbLocationUpdatableRelationshipsEquals(CbLocation expected, CbLocation actual) {
        assertThat(expected)
            .as("Verify CbLocation relationships")
            .satisfies(e -> assertThat(e.getCbCity()).as("check cbCity").isEqualTo(actual.getCbCity()));
    }
}
