package si.eclectic.complaints.da.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OperatorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorAllPropertiesEquals(Operator expected, Operator actual) {
        assertOperatorAutoGeneratedPropertiesEquals(expected, actual);
        assertOperatorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorAllUpdatablePropertiesEquals(Operator expected, Operator actual) {
        assertOperatorUpdatableFieldsEquals(expected, actual);
        assertOperatorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorAutoGeneratedPropertiesEquals(Operator expected, Operator actual) {
        assertThat(expected)
            .as("Verify Operator auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorUpdatableFieldsEquals(Operator expected, Operator actual) {
        assertThat(expected)
            .as("Verify Operator relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getMiddleName()).as("check middleName").isEqualTo(actual.getMiddleName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorUpdatableRelationshipsEquals(Operator expected, Operator actual) {}
}
