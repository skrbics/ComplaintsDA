package si.eclectic.complaints.da.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ApplicantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicantAllPropertiesEquals(Applicant expected, Applicant actual) {
        assertApplicantAutoGeneratedPropertiesEquals(expected, actual);
        assertApplicantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicantAllUpdatablePropertiesEquals(Applicant expected, Applicant actual) {
        assertApplicantUpdatableFieldsEquals(expected, actual);
        assertApplicantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicantAutoGeneratedPropertiesEquals(Applicant expected, Applicant actual) {
        assertThat(expected)
            .as("Verify Applicant auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicantUpdatableFieldsEquals(Applicant expected, Applicant actual) {
        assertThat(expected)
            .as("Verify Applicant relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getMiddleName()).as("check middleName").isEqualTo(actual.getMiddleName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicantUpdatableRelationshipsEquals(Applicant expected, Applicant actual) {
        assertThat(expected)
            .as("Verify Applicant relationships")
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()));
    }
}
