package si.eclectic.complaints.da.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CbCityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCbCityAllPropertiesEquals(CbCity expected, CbCity actual) {
        assertCbCityAutoGeneratedPropertiesEquals(expected, actual);
        assertCbCityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCbCityAllUpdatablePropertiesEquals(CbCity expected, CbCity actual) {
        assertCbCityUpdatableFieldsEquals(expected, actual);
        assertCbCityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCbCityAutoGeneratedPropertiesEquals(CbCity expected, CbCity actual) {
        assertThat(expected)
            .as("Verify CbCity auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCbCityUpdatableFieldsEquals(CbCity expected, CbCity actual) {
        assertThat(expected)
            .as("Verify CbCity relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getZip()).as("check zip").isEqualTo(actual.getZip()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCbCityUpdatableRelationshipsEquals(CbCity expected, CbCity actual) {}
}
